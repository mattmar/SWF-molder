% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/swf_molder2.0.r
\name{swf.molder}
\alias{swf.molder}
\title{SWF Molder Function}
\usage{
swf.molder(
  Hmatrix,
  swfCover = 0.1,
  swfCat,
  agriCat,
  Q,
  fDiagonal,
  reduceTo = 0,
  iterations = 20,
  kernelCl = 20,
  kernelRw = 20,
  NNeighbors = 0,
  maxDistance = 1,
  queensCase = FALSE,
  np = 1,
  deBug = FALSE
)
}
\arguments{
\item{Hmatrix}{A matrix representing the initial habitat state.}

\item{swfCover}{The desired cover proportion for the swfCat category.}

\item{swfCat}{The category value in the matrix to be increased.}

\item{agriCat}{The category value in the matrix considered as non-habitat.}

\item{Q}{The number of cells to be potentially modified in each iteration.}

\item{fDiagonal}{Function to determine the prioritization of diagonal neighbors.}

\item{reduceTo}{A factor by which to reduce the selection of cells during processing.}

\item{iterations}{The number of iterations to run the modification process.}

\item{kernelCl}{The number of columns in the kernel (clumping window).}

\item{kernelRw}{The number of rows in the kernel (clumping window).}

\item{NNeighbors}{The number of neighbor cells to consider for potential habitat clumping.}

\item{maxDistance}{The maximum distance to look for neighbor cells.}

\item{queensCase}{Logical; if TRUE, considers all 8 directions for neighbors; if FALSE, only orthogonal.}

\item{np}{Number of cores for parallel processing.}

\item{deBug}{Logical; if TRUE, prints debugging information during processing.}
}
\value{
A list of matrices representing the state of the habitat matrix after each iteration.
}
\description{
This function modifies a habitat matrix to increase the cover of a specified category
(swfCat) by clumping it within a defined kernel size, considering neighbor preferences
and optionally reducing the selection by a given factor.
}
\examples{
initial_matrix <- matrix(c(1,2,1,3,1,2,2,3), ncol=2)
result <- swf.molder(Hmatrix = initial_matrix, swfCover=0.75, swfCat=2, 
                     agriCat=1, Q=1, fDiagonal=TRUE, reduceTo=0, iterations=20, 
                     kernelCl=2, kernelRw=2, NNeighbors=0, maxDistance=1, 
                     queensCase=FALSE, np=1, deBug=FALSE)
}
